//
//  StyleKitName.swift
//  ProjectName
//
//  Created by AuthorName on 23/05/2019.
//  Copyright Â© 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

final class PauseButton: NavigationButton {
    
    enum `Type`: String {
        case pause, play
    }
    
    var type = Type.play /* default type */
//    {
//        didSet {
//            draw(self.frame)
//        }
//    }
    
    @available(*, unavailable, message: "This property is reserved for Interface Builder. Use 'type' instead.")
    @IBInspectable var typeName: String? {
        willSet {
            // Ensure user enters a valid type while making it lowercase.
            // Ignore input if not valid.
            if let newType = Type(rawValue: newValue?.lowercased() ?? "") {
                type = newType
            }
        }
    }
    
    //// Drawing Methods
    public override func draw(_ rect: CGRect) {
        switch type {
        case .play: NavigationButton.drawPlay(frame: rect, resizing: .aspectFill, color: tintColor)
        case .pause: NavigationButton.drawPause(frame: rect, resizing: .aspectFill, color: tintColor)
        }
    }
    
}

final class RewindButton: NavigationButton {
    
    enum `Type`: String {
        case previous, following
    }
    
    var type = Type.following // default type
    
    @available(*, unavailable, message: "This property is reserved for Interface Builder. Use 'type' instead.")
    @IBInspectable var typeName: String? {
        willSet {
            // Ensure user enters a valid type while making it lowercase.
            // Ignore input if not valid.
            if let newType = Type(rawValue: newValue?.lowercased() ?? "") {
                type = newType
            }
        }
    }
    
    //// Drawing Methods
    public override func draw(_ rect: CGRect) {
        NavigationButton.drawRewind(frame: rect, resizing: .aspectFill, color: tintColor, type: type.rawValue)
    }
    
}

@IBDesignable
public class NavigationButton : UIView {
    
    @objc dynamic public class func drawPause(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, color: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        
        //// Color Declarations
        let color = color
        color.setFill()
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 11.11, y: 0, width: 33.33, height: 100), cornerRadius: 10)
        rectanglePath.fill()
        
        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 100, y: 0)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -44.44, y: 0, width: 33.33, height: 100), cornerRadius: 10)
        rectangle2Path.fill()

        context.restoreGState()

    }

    @objc dynamic public class func drawRewind(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, color: UIColor, type: String) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        
        //// Color Declarations
        let color = color
        color.setFill()
        
        //// Bezier Drawing
        if type == "previous" {
            
            context.saveGState()
            context.translateBy(x: 100, y: 75)
            context.rotate(by: -180 * CGFloat.pi/180)
            
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 0, y: 0))
            bezierPath.addLine(to: CGPoint(x: 66.67, y: 25))
            bezierPath.addLine(to: CGPoint(x: 0, y: 50))
            bezierPath.addLine(to: CGPoint(x: 0, y: 0))
            bezierPath.close()
            bezierPath.fill()
            
            context.restoreGState()
            
        } else {
            
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 0, y: 25))
            bezierPath.addLine(to: CGPoint(x: 66.67, y: 50))
            bezierPath.addLine(to: CGPoint(x: 0, y: 75))
            bezierPath.addLine(to: CGPoint(x: 0, y: 25))
            bezierPath.close()
            bezierPath.fill()
            
        }
        
        if type == "previous" {
            
            context.saveGState()
            context.translateBy(x: 50, y: 75)
            context.rotate(by: -180 * CGFloat.pi/180)
            
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 0, y: 0))
            bezier2Path.addLine(to: CGPoint(x: 50, y: 25))
            bezier2Path.addLine(to: CGPoint(x: 0, y: 50))
            bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
            bezier2Path.close()
            bezier2Path.fill()
            
            context.restoreGState()
            
        } else {
            
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 50, y: 25))
            bezier2Path.addLine(to: CGPoint(x: 100, y: 50))
            bezier2Path.addLine(to: CGPoint(x: 50, y: 75))
            bezier2Path.addLine(to: CGPoint(x: 50, y: 25))
            bezier2Path.close()
            bezier2Path.fill()
            
            context.restoreGState()
            
        }
        
    }
    
    @objc dynamic public class func drawPlay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, color: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Color Declarations
        let color = color
        color.setFill()
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)
        
        
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 50))
        bezier2Path.fill()
        
        context.restoreGState()
        
    }
    
    @objc(StyleKitNameResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
